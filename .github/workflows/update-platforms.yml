name: Update Platform Metadata
on:
  schedule:
    - cron: '0 2 * * *'  # Täglich um 2 Uhr
  workflow_dispatch:  # Manuell auslösbar

jobs:
  update-platforms:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install jq
        run: sudo apt-get install -y jq
      
      # PAPER (PaperMC API)
      - name: Check Paper updates
        id: paper
        run: |
          echo "Checking Paper updates..."
          CURRENT_PAPER=$(cat metadata/platforms/paper.json | jq '.versions')
          
          # Hole alle Paper Versionen
          PAPER_VERSIONS=$(curl -s "https://api.papermc.io/v2/projects/paper" | jq '.versions')
          echo "Found Paper versions: $PAPER_VERSIONS"
          
          # Für jede Version hole die neueste Build-ID
          NEW_PAPER="[]"
          for version in $(echo "$PAPER_VERSIONS" | jq -r '.[]'); do
            echo "Checking version: $version"
            BUILD_DATA=$(curl -s "https://api.papermc.io/v2/projects/paper/versions/$version")
            BUILD_ID=$(echo "$BUILD_DATA" | jq '.builds | max')
            echo "Latest build for $version: $BUILD_ID"
            
            NEW_VERSION="{\"version\": \"$version\", \"buildId\": $BUILD_ID}"
            NEW_PAPER=$(echo "$NEW_PAPER $NEW_VERSION" | jq -s '.[0] + [.[1]]')
          done
          
          # Vergleiche mit aktuellen Versionen
          NEW_VERSIONS=$(echo "$CURRENT_PAPER $NEW_PAPER" | jq -s '.[1] - .[0]')
          
          if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
            echo "New Paper versions found:"
            echo "$NEW_VERSIONS" | jq .
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "$NEW_VERSIONS" > paper-new.json
          else
            echo "No new Paper versions"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi
      
      # VELOCITY (PaperMC API)
      - name: Check Velocity updates
        id: velocity
        run: |
          echo "Checking Velocity updates..."
          CURRENT_VELOCITY=$(cat metadata/platforms/velocity.json | jq '.versions')
          
          VELOCITY_VERSIONS=$(curl -s "https://api.papermc.io/v2/projects/velocity" | jq '.versions')
          echo "Found Velocity versions: $VELOCITY_VERSIONS"
          
          NEW_VELOCITY="[]"
          for version in $(echo "$VELOCITY_VERSIONS" | jq -r '.[]'); do
            echo "Checking version: $version"
            BUILD_DATA=$(curl -s "https://api.papermc.io/v2/projects/velocity/versions/$version")
            BUILD_ID=$(echo "$BUILD_DATA" | jq '.builds | max')
            echo "Latest build for $version: $BUILD_ID"
            
            NEW_VERSION="{\"version\": \"$version\", \"buildId\": $BUILD_ID}"
            NEW_VELOCITY=$(echo "$NEW_VELOCITY $NEW_VERSION" | jq -s '.[0] + [.[1]]')
          done
          
          NEW_VERSIONS=$(echo "$CURRENT_VELOCITY $NEW_VELOCITY" | jq -s '.[1] - .[0]')
          
          if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
            echo "New Velocity versions found:"
            echo "$NEW_VERSIONS" | jq .
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "$NEW_VERSIONS" > velocity-new.json
          else
            echo "No new Velocity versions"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi
      
      # FOLIA (Fill Data API)
      - name: Check Folia updates
        id: folia
        run: |
          echo "Checking Folia updates..."
          CURRENT_FOLIA=$(cat metadata/platforms/folia.json | jq '.versions')
          
          # Folia verwendet eine andere API - fill-data.papermc.io
          FOLIA_VERSIONS=$(curl -s "https://api.papermc.io/v2/projects/folia" | jq '.versions')
          echo "Found Folia versions: $FOLIA_VERSIONS"
          
          NEW_FOLIA="[]"
          for version in $(echo "$FOLIA_VERSIONS" | jq -r '.[]'); do
            echo "Checking version: $version"
            BUILD_DATA=$(curl -s "https://api.papermc.io/v2/projects/folia/versions/$version")
            echo "Build data for $version: $BUILD_DATA"
            
            # Folia hat eine andere API-Struktur - hole den neuesten Build
            BUILD_ID=$(echo "$BUILD_DATA" | jq '.builds | max')
            echo "Latest build for $version: $BUILD_ID"
            
            # Hole Hash für den neuesten Build
            HASH=$(echo "$BUILD_DATA" | jq -r '.builds[] | select(.build == '$BUILD_ID') | .downloads.application.sha256 // empty')
            echo "Hash for $version build $BUILD_ID: $HASH"
            
            if [ "$BUILD_ID" != "null" ] && [ -n "$HASH" ]; then
              NEW_VERSION="{\"version\": \"$version\", \"buildId\": \"$BUILD_ID\", \"hash\": \"$HASH\"}"
              NEW_FOLIA=$(echo "$NEW_FOLIA $NEW_VERSION" | jq -s '.[0] + [.[1]]')
            fi
          done
          
          NEW_VERSIONS=$(echo "$CURRENT_FOLIA $NEW_FOLIA" | jq -s '.[1] - .[0]')
          
          if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
            echo "New Folia versions found:"
            echo "$NEW_VERSIONS" | jq .
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "$NEW_VERSIONS" > folia-new.json
          else
            echo "No new Folia versions"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi
      
      # PURPUR (Purpur API)
      - name: Check Purpur updates
        id: purpur
        run: |
          echo "Checking Purpur updates..."
          CURRENT_PURPUR=$(cat metadata/platforms/purpur.json | jq '.versions')
          
          PURPUR_VERSIONS=$(curl -s "https://api.purpurmc.org/v2/versions" | jq '.versions')
          echo "Found Purpur versions: $PURPUR_VERSIONS"
          
          if [ "$PURPUR_VERSIONS" = "null" ] || [ "$PURPUR_VERSIONS" = "[]" ]; then
            echo "No Purpur versions found or API error"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          else
            NEW_PURPUR="[]"
            for version in $(echo "$PURPUR_VERSIONS" | jq -r '.[]'); do
              echo "Checking version: $version"
              BUILD_ID=$(curl -s "https://api.purpurmc.org/v2/purpur/$version" | jq '.builds | max')
              echo "Latest build for $version: $BUILD_ID"
              
              if [ "$BUILD_ID" != "null" ]; then
                NEW_VERSION="{\"version\": \"$version\", \"buildId\": \"$BUILD_ID\"}"
                NEW_PURPUR=$(echo "$NEW_PURPUR $NEW_VERSION" | jq -s '.[0] + [.[1]]')
              fi
            done
            
            NEW_VERSIONS=$(echo "$CURRENT_PURPUR $NEW_PURPUR" | jq -s '.[1] - .[0]')
            
            if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
              echo "New Purpur versions found:"
              echo "$NEW_VERSIONS" | jq .
              echo "has_updates=true" >> $GITHUB_OUTPUT
              echo "$NEW_VERSIONS" > purpur-new.json
            else
              echo "No new Purpur versions"
              echo "has_updates=false" >> $GITHUB_OUTPUT
            fi
          fi
      
      # FABRIC (Fabric API)
      - name: Check Fabric updates
        id: fabric
        run: |
          echo "Checking Fabric updates..."
          CURRENT_FABRIC=$(cat metadata/platforms/fabric.json | jq '.versions')
          
          # Hole Game versions
          GAME_VERSIONS=$(curl -s "https://meta.fabricmc.net/v2/versions/game" | jq '.[:5]')
          echo "Found game versions: $GAME_VERSIONS"
          
          # Hole Loader versions
          LOADER_VERSION=$(curl -s "https://meta.fabricmc.net/v2/versions/loader" | jq -r '.[0].version // empty')
          echo "Latest loader version: $LOADER_VERSION"
          
          # Hole Fabric API versions
          API_VERSION=$(curl -s "https://meta.fabricmc.net/v2/versions/fabric-api" | jq -r '.[0].version // empty')
          echo "Latest API version: $API_VERSION"
          
          if [ -z "$LOADER_VERSION" ] || [ -z "$API_VERSION" ] || [ "$GAME_VERSIONS" = "null" ]; then
            echo "Fabric API error or missing data"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          else
            # Erstelle neue Fabric Versionen
            NEW_FABRIC="[]"
            for game_version in $(echo "$GAME_VERSIONS" | jq -r '.[].version'); do
              NEW_VERSION="{\"version\": \"$game_version\", \"buildId\": \"$LOADER_VERSION\", \"fabricAPIVersion\": \"$API_VERSION\"}"
              NEW_FABRIC=$(echo "$NEW_FABRIC $NEW_VERSION" | jq -s '.[0] + [.[1]]')
            done
            
            NEW_VERSIONS=$(echo "$CURRENT_FABRIC $NEW_FABRIC" | jq -s '.[1] - .[0]')
            
            if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
              echo "New Fabric versions found:"
              echo "$NEW_VERSIONS" | jq .
              echo "has_updates=true" >> $GITHUB_OUTPUT
              echo "$NEW_VERSIONS" > fabric-new.json
            else
              echo "No new Fabric versions"
              echo "has_updates=false" >> $GITHUB_OUTPUT
            fi
          fi
      
      # WATERFALL (PaperMC API)
      - name: Check Waterfall updates
        id: waterfall
        run: |
          echo "Checking Waterfall updates..."
          CURRENT_WATERFALL=$(cat metadata/platforms/waterfall.json | jq '.versions')
          
          WATERFALL_VERSIONS=$(curl -s "https://api.papermc.io/v2/projects/waterfall" | jq '.versions')
          echo "Found Waterfall versions: $WATERFALL_VERSIONS"
          
          NEW_WATERFALL="[]"
          for version in $(echo "$WATERFALL_VERSIONS" | jq -r '.[]'); do
            echo "Checking version: $version"
            BUILD_DATA=$(curl -s "https://api.papermc.io/v2/projects/waterfall/versions/$version")
            BUILD_ID=$(echo "$BUILD_DATA" | jq '.builds | max')
            echo "Latest build for $version: $BUILD_ID"
            
            NEW_VERSION="{\"version\": \"$version\", \"buildId\": $BUILD_ID}"
            NEW_WATERFALL=$(echo "$NEW_WATERFALL $NEW_VERSION" | jq -s '.[0] + [.[1]]')
          done
          
          NEW_VERSIONS=$(echo "$CURRENT_WATERFALL $NEW_WATERFALL" | jq -s '.[1] - .[0]')
          
          if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
            echo "New Waterfall versions found:"
            echo "$NEW_VERSIONS" | jq .
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "$NEW_VERSIONS" > waterfall-new.json
          else
            echo "No new Waterfall versions"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi
      
      # Update alle Platforms
      - name: Update Paper metadata
        if: steps.paper.outputs.has_updates == 'true'
        run: |
          echo "Updating Paper metadata..."
          jq --slurpfile new paper-new.json \
            '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
            metadata/platforms/paper.json > paper-updated.json
          mv paper-updated.json metadata/platforms/paper.json
          echo "Paper metadata updated successfully"
      
      - name: Update Velocity metadata
        if: steps.velocity.outputs.has_updates == 'true'
        run: |
          echo "Updating Velocity metadata..."
          jq --slurpfile new velocity-new.json \
            '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
            metadata/platforms/velocity.json > velocity-updated.json
          mv velocity-updated.json metadata/platforms/velocity.json
          echo "Velocity metadata updated successfully"
      
      - name: Update Folia metadata
        if: steps.folia.outputs.has_updates == 'true'
        run: |
          echo "Updating Folia metadata..."
          jq --slurpfile new folia-new.json \
            '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
            metadata/platforms/folia.json > folia-updated.json
          mv folia-updated.json metadata/platforms/folia.json
          echo "Folia metadata updated successfully"
      
      - name: Update Purpur metadata
        if: steps.purpur.outputs.has_updates == 'true'
        run: |
          echo "Updating Purpur metadata..."
          jq --slurpfile new purpur-new.json \
            '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
            metadata/platforms/purpur.json > purpur-updated.json
          mv purpur-updated.json metadata/platforms/purpur.json
          echo "Purpur metadata updated successfully"
      
      - name: Update Fabric metadata
        if: steps.fabric.outputs.has_updates == 'true'
        run: |
          echo "Updating Fabric metadata..."
          jq --slurpfile new fabric-new.json \
            '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
            metadata/platforms/fabric.json > fabric-updated.json
          mv fabric-updated.json metadata/platforms/fabric.json
          echo "Fabric metadata updated successfully"
      
      - name: Update Waterfall metadata
        if: steps.waterfall.outputs.has_updates == 'true'
        run: |
          echo "Updating Waterfall metadata..."
          jq --slurpfile new waterfall-new.json \
            '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
            metadata/platforms/waterfall.json > waterfall-updated.json
          mv waterfall-updated.json metadata/platforms/waterfall.json
          echo "Waterfall metadata updated successfully"
      
      - name: Create Pull Request
        if: steps.paper.outputs.has_updates == 'true' || steps.velocity.outputs.has_updates == 'true' || steps.folia.outputs.has_updates == 'true' || steps.purpur.outputs.has_updates == 'true' || steps.fabric.outputs.has_updates == 'true' || steps.waterfall.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update platform metadata with new versions"
          title: "🔄 Platform Updates: New versions available"
          body: |
            ## Platform Updates
            
            This PR updates the platform metadata with new versions:
            
            - **Paper**: ${{ steps.paper.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Velocity**: ${{ steps.velocity.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Folia**: ${{ steps.folia.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Purpur**: ${{ steps.purpur.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Fabric**: ${{ steps.fabric.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Waterfall**: ${{ steps.waterfall.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            
            ### Changes
            - Updated `metadata/platforms/*.json` files
            - Added new versions from external APIs
            - Sorted versions by version number (newest first)
          branch: update-platform-metadata
          delete-branch: true
